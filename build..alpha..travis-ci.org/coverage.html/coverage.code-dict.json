{"/home/travis/build/npmtest/node-npmtest-homebridge-camera-ffmpeg/test.js":"/* istanbul instrument in package npmtest_homebridge_camera_ffmpeg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-camera-ffmpeg/lib.npmtest_homebridge_camera_ffmpeg.js":"/* istanbul instrument in package npmtest_homebridge_camera_ffmpeg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_camera_ffmpeg = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_camera_ffmpeg = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-camera-ffmpeg/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-camera-ffmpeg && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_camera_ffmpeg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_camera_ffmpeg\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_camera_ffmpeg.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge_camera_ffmpeg.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_camera_ffmpeg.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge_camera_ffmpeg.__dirname + '/lib.npmtest_homebridge_camera_ffmpeg.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-camera-ffmpeg/node_modules/homebridge-camera-ffmpeg/index.js":"var Accessory, hap, UUIDGen;\n\nvar FFMPEG = require('./ffmpeg').FFMPEG;\n\nmodule.exports = function(homebridge) {\n  Accessory = homebridge.platformAccessory;\n  hap = homebridge.hap;\n  UUIDGen = homebridge.hap.uuid;\n\n  homebridge.registerPlatform(\"homebridge-camera-ffmpeg\", \"Camera-ffmpeg\", ffmpegPlatform, true);\n}\n\nfunction ffmpegPlatform(log, config, api) {\n  var self = this;\n\n  self.log = log;\n  self.config = config || {};\n\n  if (api) {\n    self.api = api;\n\n    if (api.version < 2.1) {\n      throw new Error(\"Unexpected API version.\");\n    }\n\n    self.api.on('didFinishLaunching', self.didFinishLaunching.bind(this));\n  }\n}\n\nffmpegPlatform.prototype.configureAccessory = function(accessory) {\n  // Won't be invoked\n}\n\nffmpegPlatform.prototype.didFinishLaunching = function() {\n  var self = this;\n\n  if (self.config.cameras) {\n    var configuredAccessories = [];\n\n    var cameras = self.config.cameras;\n    cameras.forEach(function(cameraConfig) {\n      var cameraName = cameraConfig.name;\n      var videoConfig = cameraConfig.videoConfig;\n\n      if (!cameraName || !videoConfig) {\n        self.log(\"Missing parameters.\");\n        return;\n      }\n\n      var uuid = UUIDGen.generate(cameraName);\n      var cameraAccessory = new Accessory(cameraName, uuid, hap.Accessory.Categories.CAMERA);\n      var cameraSource = new FFMPEG(hap, videoConfig);\n      cameraAccessory.configureCameraSource(cameraSource);\n      configuredAccessories.push(cameraAccessory);\n    });\n\n    self.api.publishCameraAccessories(\"Camera-ffmpeg\", configuredAccessories);\n  }\n}","/home/travis/build/npmtest/node-npmtest-homebridge-camera-ffmpeg/node_modules/homebridge-camera-ffmpeg/ffmpeg.js":"'use strict';\nvar uuid, Service, Characteristic, StreamController;\n\nvar fs = require('fs');\nvar ip = require('ip');\nvar spawn = require('child_process').spawn;\n\nmodule.exports = {\n  FFMPEG: FFMPEG\n};\n\nfunction FFMPEG(hap, ffmpegOpt) {\n  uuid = hap.uuid;\n  Service = hap.Service;\n  Characteristic = hap.Characteristic;\n  StreamController = hap.StreamController;\n\n  if (!ffmpegOpt.source) {\n    throw new Error(\"Missing source for camera.\");\n  }\n\n  this.ffmpegSource = ffmpegOpt.source;\n  this.ffmpegImageSource = ffmpegOpt.stillImageSource;\n\n  this.services = [];\n  this.streamControllers = [];\n\n  this.pendingSessions = {};\n  this.ongoingSessions = {};\n\n  var numberOfStreams = ffmpegOpt.maxStreams || 2;\n  var videoResolutions = [];\n  \n  var maxWidth = ffmpegOpt.maxWidth;\n  var maxHeight = ffmpegOpt.maxHeight;\n  var maxFPS = (ffmpegOpt.maxFPS > 30) ? 30 : ffmpegOpt.maxFPS;\n\n  if (maxWidth >= 320) {\n    if (maxHeight >= 240) {\n      videoResolutions.push([320, 240, maxFPS]);\n      if (maxFPS > 15) {\n        videoResolutions.push([320, 240, 15]);\n      }\n    }\n\n    if (maxHeight >= 180) {\n      videoResolutions.push([320, 180, maxFPS]);\n      if (maxFPS > 15) {\n        videoResolutions.push([320, 180, 15]);\n      }\n    }\n  }\n\n  if (maxWidth >= 480) {\n    if (maxHeight >= 360) {\n      videoResolutions.push([480, 360, maxFPS]);\n    }\n\n    if (maxHeight >= 270) {\n      videoResolutions.push([480, 270, maxFPS]);\n    }\n  }\n\n  if (maxWidth >= 640) {\n    if (maxHeight >= 480) {\n      videoResolutions.push([640, 480, maxFPS]);\n    }\n\n    if (maxHeight >= 360) {\n      videoResolutions.push([640, 360, maxFPS]);\n    }\n  }\n\n  if (maxWidth >= 1280) {\n    if (maxHeight >= 960) {\n      videoResolutions.push([1280, 960, maxFPS]);\n    }\n\n    if (maxHeight >= 720) {\n      videoResolutions.push([1280, 720, maxFPS]);\n    }\n  }\n\n  if (maxWidth >= 1920) {\n    if (maxHeight >= 1080) {\n      videoResolutions.push([1920, 1080, maxFPS]);\n    }\n  }\n\n  let options = {\n    proxy: false, // Requires RTP/RTCP MUX Proxy\n    srtp: true, // Supports SRTP AES_CM_128_HMAC_SHA1_80 encryption\n    video: {\n      resolutions: videoResolutions,\n      codec: {\n        profiles: [0, 1, 2], // Enum, please refer StreamController.VideoCodecParamProfileIDTypes\n        levels: [0, 1, 2] // Enum, please refer StreamController.VideoCodecParamLevelTypes\n      }\n    },\n    audio: {\n      codecs: [\n        {\n          type: \"OPUS\", // Audio Codec\n          samplerate: 24 // 8, 16, 24 KHz\n        },\n        {\n          type: \"AAC-eld\",\n          samplerate: 16\n        }\n      ]\n    }\n  }\n\n  this.createCameraControlService();\n  this._createStreamControllers(numberOfStreams, options); \n}\n\nFFMPEG.prototype.handleCloseConnection = function(connectionID) {\n  this.streamControllers.forEach(function(controller) {\n    controller.handleCloseConnection(connectionID);\n  });\n}\n\nFFMPEG.prototype.handleSnapshotRequest = function(request, callback) {\n  let resolution = request.width + 'x' + request.height;\n  var imageSource = this.ffmpegImageSource !== undefined ? this.ffmpegImageSource : this.ffmpegSource;\n  let ffmpeg = spawn('ffmpeg', (imageSource + ' -t 1 -s '+ resolution + ' -f image2 -').split(' '), {env: process.env});\n  var imageBuffer = Buffer(0);\n\n  ffmpeg.stdout.on('data', function(data) {\n    imageBuffer = Buffer.concat([imageBuffer, data]);\n  });\n  ffmpeg.on('close', function(code) {\n    callback(undefined, imageBuffer);\n  });\n}\n\nFFMPEG.prototype.prepareStream = function(request, callback) {\n  var sessionInfo = {};\n\n  let sessionID = request[\"sessionID\"];\n  let targetAddress = request[\"targetAddress\"];\n\n  sessionInfo[\"address\"] = targetAddress;\n\n  var response = {};\n\n  let videoInfo = request[\"video\"];\n  if (videoInfo) {\n    let targetPort = videoInfo[\"port\"];\n    let srtp_key = videoInfo[\"srtp_key\"];\n    let srtp_salt = videoInfo[\"srtp_salt\"];\n\n    let videoResp = {\n      port: targetPort,\n      ssrc: 1,\n      srtp_key: srtp_key,\n      srtp_salt: srtp_salt\n    };\n\n    response[\"video\"] = videoResp;\n\n    sessionInfo[\"video_port\"] = targetPort;\n    sessionInfo[\"video_srtp\"] = Buffer.concat([srtp_key, srtp_salt]);\n    sessionInfo[\"video_ssrc\"] = 1; \n  }\n\n  let audioInfo = request[\"audio\"];\n  if (audioInfo) {\n    let targetPort = audioInfo[\"port\"];\n    let srtp_key = audioInfo[\"srtp_key\"];\n    let srtp_salt = audioInfo[\"srtp_salt\"];\n\n    let audioResp = {\n      port: targetPort,\n      ssrc: 1,\n      srtp_key: srtp_key,\n      srtp_salt: srtp_salt\n    };\n\n    response[\"audio\"] = audioResp;\n\n    sessionInfo[\"audio_port\"] = targetPort;\n    sessionInfo[\"audio_srtp\"] = Buffer.concat([srtp_key, srtp_salt]);\n    sessionInfo[\"audio_ssrc\"] = 1; \n  }\n\n  let currentAddress = ip.address();\n  var addressResp = {\n    address: currentAddress\n  };\n\n  if (ip.isV4Format(currentAddress)) {\n    addressResp[\"type\"] = \"v4\";\n  } else {\n    addressResp[\"type\"] = \"v6\";\n  }\n\n  response[\"address\"] = addressResp;\n  this.pendingSessions[uuid.unparse(sessionID)] = sessionInfo;\n\n  callback(response);\n}\n\nFFMPEG.prototype.handleStreamRequest = function(request) {\n  var sessionID = request[\"sessionID\"];\n  var requestType = request[\"type\"];\n  if (sessionID) {\n    let sessionIdentifier = uuid.unparse(sessionID);\n\n    if (requestType == \"start\") {\n      var sessionInfo = this.pendingSessions[sessionIdentifier];\n      if (sessionInfo) {\n        var width = 1280;\n        var height = 720;\n        var fps = 30;\n        var bitrate = 300;\n\n        let videoInfo = request[\"video\"];\n        if (videoInfo) {\n          width = videoInfo[\"width\"];\n          height = videoInfo[\"height\"];\n\n          let expectedFPS = videoInfo[\"fps\"];\n          if (expectedFPS < fps) {\n            fps = expectedFPS;\n          }\n\n          bitrate = videoInfo[\"max_bit_rate\"];\n        }\n\n        let targetAddress = sessionInfo[\"address\"];\n        let targetVideoPort = sessionInfo[\"video_port\"];\n        let videoKey = sessionInfo[\"video_srtp\"];\n\n        let ffmpegCommand = this.ffmpegSource + ' -threads 0 -vcodec libx264 -an -pix_fmt yuv420p -r '+ fps +' -f rawvideo -tune zerolatency -vf scale='+ width +':'+ height +' -b:v '+ bitrate +'k -bufsize '+ bitrate +'k -payload_type 99 -ssrc 1 -f rtp -srtp_out_suite AES_CM_128_HMAC_SHA1_80 -srtp_out_params '+videoKey.toString('base64')+' srtp://'+targetAddress+':'+targetVideoPort+'?rtcpport='+targetVideoPort+'&localrtcpport='+targetVideoPort+'&pkt_size=1378';\n        console.log(ffmpegCommand);\n        let ffmpeg = spawn('ffmpeg', ffmpegCommand.split(' '), {env: process.env});\n        this.ongoingSessions[sessionIdentifier] = ffmpeg;\n      }\n\n      delete this.pendingSessions[sessionIdentifier];\n    } else if (requestType == \"stop\") {\n      var ffmpegProcess = this.ongoingSessions[sessionIdentifier];\n      if (ffmpegProcess) {\n        ffmpegProcess.kill('SIGKILL');\n      }\n\n      delete this.ongoingSessions[sessionIdentifier];\n    }\n  }\n}\n\nFFMPEG.prototype.createCameraControlService = function() {\n  var controlService = new Service.CameraControl();\n\n  this.services.push(controlService);\n}\n\n// Private\n\nFFMPEG.prototype._createStreamControllers = function(maxStreams, options) {\n  let self = this;\n\n  for (var i = 0; i < maxStreams; i++) {\n    var streamController = new StreamController(i, options, self);\n\n    self.services.push(streamController.service);\n    self.streamControllers.push(streamController);\n  }\n}\n"}